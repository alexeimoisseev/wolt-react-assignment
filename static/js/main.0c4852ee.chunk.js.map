{"version":3,"sources":["components/OpeningHours/convertOpeningHours.ts","components/TableItem/TableItem.tsx","components/OpeningHours/OpeningHours.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["daysOfWeekSorted","hourArrayToString","arr","hours","reduce","acc","hour","idx","str","length","joinHoursToString","map","hourItem","time","value","moment","startOf","add","format","isToday","day","toLowerCase","TableItem","props","className","dayOfWeek","OpeningHours","t","openingHours","index","result","i","push","type","shift","item","convertOpeningHours","input","icon","faClock","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"o0BAeaA,EAAmB,CAC9B,SACA,UACA,YACA,WACA,SACA,WACA,UAiCF,SAASC,EAAkBC,GAIzB,OApBF,SAA2BC,GACzB,OAAOA,EAAMC,QAAO,SAACC,EAAKC,EAAMC,GAC9B,GAAIA,EAAM,IAAM,EACd,MAAM,GAAN,OAAUF,GAAV,OAAgBC,EAAhB,UAEF,IAAME,EAAG,UAAMH,GAAN,OAAYC,GACrB,OAAIC,EAAMJ,EAAMM,OAAS,EAChBD,EAAM,KAERA,IACN,IAUIE,CAHOR,EAAIS,KAAI,SAACC,GACrB,OAzBsBC,EAyBED,EAASE,MAxB5BC,MAASC,QAAQ,OAAOC,IAAIJ,EAAM,UAAUK,OAAO,UAD5D,IAA0BL,MA8BnB,IAAMM,EAAU,SAACC,GAEtB,OAAOA,IADOL,MAASG,OAAO,QAAQG,e,iBCrDzB,SAASC,EAAUC,GAChC,OACE,sBAAKC,UAAU,YAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,qBAAKA,UAAU,uBAAf,SAAuCD,EAAME,YAC5CF,EAAMJ,SAAW,qBAAKK,UAAU,qBAAf,mBACjBD,EAAMT,MACL,qBAAKU,UAAU,mBAAf,SAAmCD,EAAMT,QAEzC,qBAAKU,UAAU,oBAAf,uBAGJ,qBAAKA,UAAU,4B,iBCRN,SAASE,IACtB,IAAMC,EFoDO,SACbC,GAGA,IADA,IA7CwBC,EA6ClBC,EAAS,GACNC,EAAI,EAAGA,EAAI/B,EAAiBS,OAAQsB,IAAK,CAChD,IAAMN,EAAYzB,EAAiB+B,GACnCD,EAAOE,KAAKJ,EAAaH,IAG3B,IAAK,IAAIM,EAAI,EAAGA,EAAI/B,EAAiBS,OAAQsB,IAAK,CAChD,IAAMX,EAAMU,EAAOC,GAIfX,EAAI,IAAsB,UAAhBA,EAAI,GAAGa,OAEnBH,EAzDU,KADUD,EAyDmBE,GAvDlC/B,EAAiBS,OAAS,EAE5BoB,EAAQ,GAsDWG,KAAKZ,EAAI,IAC/BU,EAAOC,GAAGG,SAKd,OAFkBJ,EAAOnB,IAAIV,GAEZG,QAAO,SAACC,EAAK8B,EAAM5B,GAClC,OAAO,2BACFF,GADL,kBAEGL,EAAiBO,GAAO4B,MAE1B,IE/EOC,CAAoBC,GAC9B,OACE,sBAAKb,UAAU,eAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,qBAAKA,UAAU,2BAAf,SACE,cAAC,IAAD,CAAiBc,KAAMC,QAEzB,qBAAKf,UAAU,8BAAf,8BAEF,qBAAKA,UAAU,4BACf,qBAAKA,UAAU,sBAAf,SACGxB,EAAiBW,KAAI,SAACS,GACrB,OACE,cAAC,EAAD,CAEEK,UAAWL,EACXN,MAAOa,EAAEP,GACTD,QAASA,EAAQC,IAHZA,WCfJoB,MARf,WACE,OACE,qBAAKhB,UAAU,MAAf,SACE,cAAC,EAAD,OCKSiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0c4852ee.chunk.js","sourcesContent":["import moment from 'moment';\n\ntype OpeningHourItem = {\n  type: string;\n  value: number;\n};\n\ntype OpeningHoursType = {\n  [dayOfWeek: string]: OpeningHourItem[];\n};\n\ntype OpeningHoursStringified = {\n  [dayOfWeek: string]: string;\n};\n\nexport const daysOfWeekSorted = [\n  'monday',\n  'tuesday',\n  'wednesday',\n  'thursday',\n  'friday',\n  'saturday',\n  'sunday'\n];\n\nfunction getPreviousIndex(index: number): number {\n  if (index === 0) {\n    return daysOfWeekSorted.length - 1;\n  }\n  return index - 1;\n}\n\nfunction getFormattedHour(time: number): string {\n  return moment().startOf('day').add(time, 'second').format('h\\u00A0A');\n}\n\n/*\n * Converts ['1 PM', '2 PM', '3 PM', '4 PM'] to '1 PM - 2 PM, 3 PM - 4 PM'\n */\nfunction joinHoursToString(hours: string[]): string {\n  return hours.reduce((acc, hour, idx) => {\n    if (idx % 2 === 0) {\n      return `${acc}${hour}\\u00A0- `;\n    }\n    const str = `${acc}${hour}`;\n    if (idx < hours.length - 1) {\n      return str + ', ';\n    }\n    return str;\n  }, '');\n}\n\n/*\n * Converts array of [{type: \"open\", value: 123}, ...] to \"1 PM - 2 PM, 3 PM - 4 PM\"\n */\nfunction hourArrayToString(arr: OpeningHourItem[]): string {\n  const hours = arr.map((hourItem) => {\n    return getFormattedHour(hourItem.value);\n  });\n  return joinHoursToString(hours);\n}\n\nexport const isToday = (day: string) => {\n  const today = moment().format('dddd').toLowerCase();\n  return day === today;\n};\n\nexport default function convertOpeningHours(\n  openingHours: OpeningHoursType\n): OpeningHoursStringified {\n  const result = [];\n  for (let i = 0; i < daysOfWeekSorted.length; i++) {\n    const dayOfWeek = daysOfWeekSorted[i];\n    result.push(openingHours[dayOfWeek]);\n  }\n\n  for (let i = 0; i < daysOfWeekSorted.length; i++) {\n    const day = result[i];\n    // Checking if day starts with closing item.\n    // It means that it is end of working time from previous day.\n    // Putting it to the end of previous day.\n    if (day[0] && day[0].type === 'close') {\n      const previousIndex = getPreviousIndex(i);\n      result[previousIndex].push(day[0]);\n      result[i].shift();\n    }\n  }\n  const daysArray = result.map(hourArrayToString);\n\n  return daysArray.reduce((acc, item, idx) => {\n    return {\n      ...acc,\n      [daysOfWeekSorted[idx]]: item\n    };\n  }, {});\n}\n","import React from 'react';\n\nimport './TableItem.css';\n\ntype TableItemProps = {\n  dayOfWeek: string;\n  value?: string | null; // '10 AM - 6 PM, 7 PM - 11 PM',\n  isToday: boolean;\n};\n\nexport default function TableItem(props: TableItemProps) {\n  return (\n    <div className=\"TableItem\">\n      <div className=\"TableItem__body\">\n        <div className=\"TableItem__dayOfWeek\">{props.dayOfWeek}</div>\n        {props.isToday && <div className=\"TableItem__isToday\">today</div>}\n        {props.value ? (\n          <div className=\"TableItem__value\">{props.value}</div>\n        ) : (\n          <div className=\"TableItem__closed\">Closed</div>\n        )}\n      </div>\n      <div className=\"TableItem__separator\"></div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faClock } from '@fortawesome/free-regular-svg-icons';\n\nimport convertOpeningHours, {\n  daysOfWeekSorted,\n  isToday\n} from './convertOpeningHours';\nimport TableItem from '../TableItem/TableItem';\n\nimport input from '../../input.json';\n\nimport './OpeningHours.css';\n\nexport default function OpeningHours() {\n  const t = convertOpeningHours(input);\n  return (\n    <div className=\"OpeningHours\">\n      <div className=\"OpeningHours__header\">\n        <div className=\"OpeningHours__headerIcon\">\n          <FontAwesomeIcon icon={faClock} />\n        </div>\n        <div className=\"OpeningHours__headerCaption\">Opening hours</div>\n      </div>\n      <div className=\"OpeningHours__separator\"></div>\n      <div className=\"OpeningHours__items\">\n        {daysOfWeekSorted.map((day) => {\n          return (\n            <TableItem\n              key={day}\n              dayOfWeek={day}\n              value={t[day]}\n              isToday={isToday(day)}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport './constants.css';\n\nimport OpeningHours from './components/OpeningHours/OpeningHours';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <OpeningHours />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}